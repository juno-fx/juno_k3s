---
# @var validate_os_version:description: Check we are on a supported OS version, error otherwise.
validate_os_version: true

# @var k3s_binary_url:description: >
#   URL for the k3s binary. Can be http://, https:// OR file://
#   When using file://, a path from your ansible control host (where your run the playbook from) will be used.
#   The files will be copied to the remote kubernetes hosts. This is useful for airgap installs.
k3s_binary_url: https://github.com/k3s-io/k3s/releases/download/v1.33.1%2Bk3s1/k3s
# @var k3s_install_script_url:description: >
#   URL for the k3s install script. Can be http://, https:// OR file://
#   When using file://, a path from your ansible control host (where your run the playbook from) will be used.
#   The files will be copied to the remote kubernetes hosts. This is useful for airgap installs.
k3s_install_script_url: https://get.k3s.io/
# @var k3s_images_url:description: >
#   URL for the k3s images tarball. Can be http://, https:// OR file://
#   When using file://, a path from your ansible control host (where your run the playbook from) will be used.
#   The files will be copied to the remote kubernetes hosts. This is useful for airgap installs.
k3s_images_url: https://github.com/k3s-io/k3s/releases/download/v1.33.1%2Bk3s1/k3s-airgap-images-amd64.tar.gz

# @var k3s_join_token:description: >
#   The token used to join the cluster. You can specify it explicitly or let the playbook autodiscover it.
#   Check out the example playbook for how to do that.
# k3s_join_token: false

# @var k3s_airgap_install:description: >
#   If true, the playbook will perform an airgapped install. Make sure all the URLs above are set to file:// or point to a local mirror.
#   When setting the URLs to file://, they will be copied from your Ansible control host to the remote hosts.
k3s_airgap_install: false

# @var k3s_bootstrap_node:description: >
#   The node used to bootstrap the cluster. This should only ever be a single node in your inventory!
#   The playbook example we provide discovers this dynamically, but you can also set it manually.
k3s_bootstrap_node: false

# @var k3s_control_plane_node:description: >
#   When true, join the node to an existing cluster as a control plane node.
#   When neither k3s_bootstrap_node nor k3s_control_plane_node is true, the node will be a worker node.
k3s_control_plane_node: false

# @var k3s_clusterjoin_address:description: The address of the cluster to join. Can only be false when k3s_bootstrap_node is true.
k3s_clusterjoin_address: false

# @var k3s_bootstrap_node_ip:description: >
#   The IP address of an existing controlplane node, used to join the cluster.
#   In most cases, we can automatically discover this, check out the playbook example - it does that out of the box!
k3s_bootstrap_node_ip: false

# @var k3s_force_reinstall:description: >
#   If true, rerun the k3s install script even if the node is already part of a cluster.
k3s_force_reinstall: false

# @var k3s_registries_yaml:description: >
#   If true, the playbook will configure the registries.yaml file to use your internal mirror.
#   For syntax refer to https://docs.k3s.io/installation/private-registry
#   The data you pass in here will be directly templated into the registries.yaml file.
k3s_registries_yaml: false

# @var k3s_uninstall:description: >
#   If true, the playbook will run the default uninstall script (/usr/local/bin/k3s-uninstall.sh)
#   This is intended mostly for quick testing - in production, ideally you'd reprovision freshly.
k3s_uninstall: false

# @var juno_install:description: >
#   Bootstrap Juno's Orion using https://github.com/juno-fx/Juno-Bootstrap
juno_install: true

# @var juno_bootstrap_git_url:description: >
#   The URL of the Juno-Bootstrap repository. This only needs to be adjusted if you forked it or are using an airgapped environment.
juno_bootstrap_git_url: "https://github.com/juno-fx/Juno-Bootstrap.git"
# @var juno_bootstrap_chart_repo_revision:description: >
#   The revision of the Juno-Bootstrap repository to use. This can be a branch name, tag or commit hash.
juno_bootstrap_chart_repo_revision: "main"

# @var juno_genesis_deployment_git_url:description: >
#   The URL of the Genesis-Deployment repository. Note you still need to set the juno_bootstrap_chart_values.genesis.url value to point to the Genesis-Deployment repository.
#   This argument is only used to create the git sercet. It can be left empty on a default, non-airgapped install.
juno_genesis_deployment_git_url: "https://github.com/juno-fx/Genesis-Deployment.git"

# @var juno_bootstrap_chart_values:description: >
#   Values to pass to the Juno Bootstrap chart. See: https://github.com/juno-fx/Juno-Bootstrap
#  If you do not use a direct OCI proxy and leverage the k3s_registries_yaml var, you also could need to adjust the repository from which to pull images.
#  For details, see: https://github.com/juno-fx/Juno-Bootstrap and the example airgapped playbook.
juno_bootstrap_chart_values: {}

# @var juno_git_username:description: >
#   The username used to authenticate with all Juno repositories you specified. This is needed when you use a private fork of the Juno Bootstrap repository.
#   It is particularly useful in airgapped environments, where you might neither have access to the public version and might require authentication on your Git host.
juno_git_username: oauth2
# @var juno_git_password:description: >
#   The password used to authenticate with all Juno repositories you specified. If left to the default (false), a public repository is assumed.
juno_git_password: false

# @var juno_bootstrap_git_username:description: >
#   This authenticates only the Juno-Bootstrap repository. You can leave it unchanged if both Juno-Bootstrap and Genesis-Deployment are accessible via juno_git_username&juno_git_password.
juno_bootstrap_git_username: "{{ juno_git_username }}"
# @var juno_bootstrap_git_password:description: >
#  This authenticates only the Juno-Bootstrap repository. You can leave it unchanged if both Juno-Bootstrap and Genesis-Deployment are accessible via juno_git_username&juno_git_password.
juno_bootstrap_git_password: "{{ juno_git_password }}"

# @var juno_genesis_deployment_git_username:description: >
#   This authenticates only the Juno Genesis Deployment repository. You can leave it unchanged if both Juno-Bootstrap and Genesis-Deployment are accessible via juno_git_username&juno_git_password.
juno_genesis_deployment_git_username: "{{ juno_git_username }}"
# @var juno_genesis_deployment_git_password:description: >
#   This authenticates only the Juno Genesis Deployment repository. You can leave it unchanged if
juno_genesis_deployment_git_password: "{{ juno_git_password }}"

# @var k3s_perform_node_labeling:description: >
#   Whether to label nodes when performing the initial k3s install.
#   Already existing nodes will not be labeled - use kubectl instead, per: https://juno-fx.github.io/Orion-Documentation/installation/pre-reqs/requirements/?h=label#1-labeling-nodes
k3s_perform_node_labeling: true

# @var k3s_node_labels:description: >
#   A list of labels to apply to a node on provisioning, only when k3s_perform_node_labeling is true.
#   Defaults to making each control plane node a Juno service node and each worker node a workstation node.
#   For details on how labels affect your Orion deployment, check out: https://juno-fx.github.io/Orion-Documentation/installation/pre-reqs/requirements/?h=label#1-labeling-nodes
k3s_node_labels:
  - "{{ k3s_control_plane_node | ternary('juno-innovations.com/service=true', 'juno-innovations.com/workstation=true') }}"

# @var k3s_copy_images:description: >
#   If true, the role will copy the k3s images tarball to the standard location where k3s can load them.
#   By default, we don't perform this if you define registries.yaml, as it is assumed you will have a local mirror.
k3s_copy_images: "{{ k3s_airgap_install and not k3s_registries_yaml }}"

argocd_image_substitutions:
  "quay.io/argoproj/argocd":
    newName: "quay.io/argoproj/argocd"
    newTag: "v3.0.9"
  "ghcr.io/dexidp/dex":
    newName: "ghcr.io/dexidp/dex"
    newTag: "v2.41.1"
  "docker.io/library/redis":
    newName: "docker.io/library/redis"
    newTag: "7.2.7-alpine"

# @var argocd_image_pull_secret:description: >
#   When set, the passed in credentials will be used to pull the ArgoCD images.
#   Example:
#     argocd_image_pull_secret:
#       username: my-username
#       password: my-password
#       registry: my-registry.com

argocd_image_pull_secret: false

# @var argocd_image_pull_secret_name:description: >
#   The name of the image pull secret to use for ArgoCD.
argocd_image_pull_secret_name: "argo-image-pull-secret"
